# -*- mode: python -*-
# Enemy Territory build script
# TTimo <ttimo@idsoftware.com>
# http://scons.sourceforge.net

import sys, os
import scons_utils

Import( 'GLOBALS' )
Import( GLOBALS )

cgame_string = """
../game/bg_animation.c
../game/bg_animgroup.c
../game/bg_campaign.c
../game/bg_character.c
../game/bg_classes.c
../game/bg_misc.c
../game/bg_pmove.c
../game/bg_slidemove.c
../game/bg_sscript.c
../game/bg_stats.c
../game/bg_tracemap.c
../game/bg_weapons.c
../game/g_match_tokens.c
../game/g_strparse.c
cg_atmospheric.c
cg_character.c
cg_commandmap.c
cg_consolecmds.c
cg_crash.c
cg_debriefing.c
cg_draw.c
cg_drawtools.c
cg_effects.c
cg_ents.c
cg_event.c
cg_fireteamoverlay.c
cg_fireteams.c
cg_flamethrower.c
cg_info.c
cg_limbopanel.c
cg_loadpanel.c
cg_localents.c
cg_main.c
cg_marks.c
cg_missionbriefing.c
cg_missionmessages.c
cg_multiview.c
cg_newDraw.c
cg_particles.c
cg_players.c
cg_playerstate.c
cg_polybus.c
cg_popupmessages.c
cg_predict.c
cg_scoreboard.c
cg_servercmds.c
cg_snapshot.c
cg_sound.c
cg_spawn.c
cg_statsranksmedals.c
cg_syscalls.c
cg_trails.c
cg_view.c
cg_weapons.c
cg_window.c
../game/q_math.c
../game/q_shared.c
../ui/ui_shared.c
"""

local_env = g_env.Copy()

local_env.Append( CPPDEFINES = [ 'CGAMEDLL' ] )

# IRATA: auto GUID download
# NOTE I: package libcurl3-dev is required on the build system
# for Debian 4 add to /etc/apt/sources.list: deb http://archive.debian.org/debian/ etch main non-free contrib
# and run "apt-get install libcurl3-dev"
# NOTE II: I'm not very happy about this solution because many lib dependencies are added to cgame (probably used for the ET main binary as well) 
# but the URL used in cg_uid.c won't be valid for ever
if (WITH_AUTOGUID == '1'):
	local_env.Append( CPPDEFINES = [ 'AUTO_GUID' ] )
	#cgame_string += """md5.c cg_osfile.c cg_uid.c"""
	cgame_string += """md5.c cg_uid.c"""
	#local_env.Append( CPPPATH = [ 'curl/include' ] )
	#local_env.Append( LINKFLAGS = ['-L ./curl/lib/LIB-Release/libcurl-release.a', '-lcurl'] )

if (WITH_SYSTEMCHECK == '1'):
	local_env.Append( CPPDEFINES = [ 'SYSTEM_CHECK' ] )

if (WITH_HWBAN == '1'):
	local_env.Append( CPPDEFINES = [ 'HW_BAN' ] )
	cgame_string += """../game/bg_hwguid.c ../game/base64.c ../game/crc32.c ../game/md5.c ../game/xorcrypt.c"""
	
	# for cross-compiling
	if (g_os == 'win32'):
		cgame_string += """../game/diskId32.cpp"""
		
cgame_list = scons_utils.BuildList( 'cgame', cgame_string )
	
# IlDuca - Compile with plpa support
#if ( g_os == 'Linux' ):
#	local_env.Append( CPPPATH 		= [ '../../../plpa-1.3/include' ] )
#	local_env.Append( LIBPATH 		= [ '%s/plpa-1.3/lib' % (GetLaunchDir()) ] )
#	local_env.Append( LIBS 			= [ 'libplpa.a' ] )

source_list = cgame_list

local_env['LINK'] = local_env['CXX']


ret = local_env.SharedLibrary( target = 'cgame', source = source_list )
Return( 'ret' )
